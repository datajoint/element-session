{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Element Session", "text": "<p>DataJoint Element for Session Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments.  Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline.</p> <p>Element Session features a DataJoint pipeline allowing for a standard approach to session management. The Element is offers options for uniquely identifying sessions either by...</p> <ul> <li><code>session_with_datetime</code> - Recording date and time</li> <li><code>session_with_id</code> - Numerical identifier</li> </ul> <p>Visit the Concepts page for more information on session management and Element Session.  To get started with building your data pipeline visit the Tutorials page.</p> <p></p>"}, {"location": "changelog/", "title": "Changelog", "text": "<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"}, {"location": "changelog/#015-2023-06-20", "title": "0.1.5 - 2023-06-20", "text": "<ul> <li>Update - GitHub Actions workflows</li> <li>Fix - Remove Google Analytics key</li> <li>Add - GitHub Issue Templates</li> </ul>"}, {"location": "changelog/#014-2023-05-11", "title": "0.1.4 - 2023-05-11", "text": "<ul> <li>Fix - <code>.ipynb</code> dark mode output for all notebooks.</li> <li>Fix - Remove <code>GOOGLE_ANALYTICS_KEY</code> from <code>u24_element_release_call.yml</code>.</li> </ul>"}, {"location": "changelog/#013-2023-04-28", "title": "0.1.3 - 2023-04-28", "text": "<ul> <li>Add - mkdocs deployment, improved docstrings</li> <li>Fix - <code>.ipynb</code> output in tutorials is not visible in dark mode.</li> </ul>"}, {"location": "changelog/#012-2022-06-01", "title": "0.1.2 - 2022-06-01", "text": "<ul> <li>Bugfix - Remove is_activated schema assertion for NWB export</li> </ul>"}, {"location": "changelog/#011-2022-05-10", "title": "0.1.1 - 2022-05-10", "text": "<ul> <li>Add - SessionExperimenter table</li> <li>Add - SessionNote table</li> <li>Add - <code>session_with_id</code> module with session primary key as integer</li> <li>Update - Rename <code>session</code> module to <code>session_with_datetime</code></li> <li>Update - Adopt black formatting into code base</li> </ul>"}, {"location": "changelog/#010b0-2021-05-07", "title": "0.1.0b0 - 2021-05-07", "text": "<ul> <li>Update - First beta release</li> </ul>"}, {"location": "changelog/#010a1-2021-05-03", "title": "0.1.0a1 - 2021-05-03", "text": "<ul> <li>Add - GitHub Action release process</li> <li>Add - <code>session</code> schema</li> </ul>"}, {"location": "citation/", "title": "Citation", "text": "<p>If your work uses Element Session, please cite the following manuscript and Research Resource Identifier (RRID).</p> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D,   Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for   Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul> <ul> <li>DataJoint Elements (RRID:SCR_021894) -   Element Session (version 0.1.5)</li> </ul>"}, {"location": "concepts/", "title": "Concepts", "text": "<p>Neuroscience experiments typically structure a repeatable protocol around a single recording session. A session might be explicitly defined as the time period in which an acquisition system is used to collect neural signal data from a unique subject. A session might include multiple recordings across data modalities or over time. Sessions are typically limited, however, to a single subject; this assumption has been encoded in the standard relationship between Element Animal and Element Session.</p> <p>This Element is a minimal schema with relatively few tables to describe the experiment session (e.g., data and time, experimenter, subject reference), the project in which the sessions may belong to (e.g., DOI, keywords, etc.), and the data directory for each session.</p>"}, {"location": "concepts/#precursor-projects", "title": "Precursor Projects", "text": "<p>All DataJoint pipelines have some form of a session schema or tables. The session table is typically in the upstream part of the pipeline, referencing the subject and serving as a common node to which all other modalities connect and expand downstream (e.g. ephys, imaging, video tracking, behavioral events, etc.).</p>"}, {"location": "concepts/#element-architecture", "title": "Element Architecture", "text": "<p>Each node in the following diagram represents the analysis code in the workflow for Element Session and corresponding table in the database.  Within the workflow, Element Session directly connects to upstream Element Animal, and indirectly connects to upstream schemas Project and User.</p> <p></p> <p>This Element offer two schema, which differ in how sessions are uniquely identified. Researchers who wish to keep track of sessions based on when they occurred should use <code>session_with_datetime</code>. Researchers wo would prefer unique integer IDs can use <code>session_with_id</code>.</p>"}, {"location": "concepts/#subject-schema", "title": "<code>subject</code> schema", "text": "Table Description Subject Basic information of the research subject"}, {"location": "concepts/#session-schema-apis-datetime-or-id", "title": "<code>session</code> schema (APIs: datetime or ID)", "text": "Table Description Session Stores session information with unique datetimes or numerical IDs SessionDirectory A collection paths to data directory for a session SessionExperimenter A record of individual(s) conducting session SessionNote Stores notes related to sessions ProjectSession Stores session information associated with a project"}, {"location": "concepts/#roadmap", "title": "Roadmap", "text": "<p>Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add features to this Element.</p>"}, {"location": "tutorials/", "title": "Tutorials", "text": "<p>Coming soon!</p>"}, {"location": "api/element_session/session_with_datetime/", "title": "session_with_datetime.py", "text": ""}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.activate", "title": "<code>activate(schema_name, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>str</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>a module (or name) containing the required dependencies.</p> <code>None</code> <p>Dependencies:</p> Upstream tables <p>Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session               To supply from element-lab add <code>Experimenter = lab.User</code>               to your <code>workflow/pipeline.py</code> before <code>session.activate()</code></p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>def activate(\n    schema_name,\n    create_schema: bool = True,\n    create_tables: bool = True,\n    linking_module: str = None,\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (str): when True (default), create schema tables in the database\n                             if they do not yet exist.\n        linking_module (str): a module (or name) containing the required dependencies.\n\n    Dependencies:\n    Upstream tables:\n        Subject: the subject with which an experimental session is associated\n        Project: the project with which experimental sessions are associated\n        Experimenter: the experimenter(s) participating in a given session\n                      To supply from element-lab add `Experimenter = lab.User`\n                      to your `workflow/pipeline.py` before `session.activate()`\n    \"\"\"\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'dependency' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.Session", "title": "<code>Session</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Central Session table</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Key for Subject table</p> <code>session_datetime</code> <code>datetime</code> <p>date and time of the session</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass Session(dj.Manual):\n\"\"\"Central Session table\n\n    Attributes:\n        Subject (foreign key): Key for Subject table\n        session_datetime (datetime): date and time of the session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Subject\n    session_datetime: datetime\n    \"\"\"\n\n    class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n        Attributes:\n            Session (foreign key): Key for Session table\n            attribute_name ( varchar(32) ): Name shared across instances of attribute\n            attribute_value ( varchar(2000), optional ):  Attribute value\n            attribute_blob (longblob, optional): Optional data store field\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        attribute_name: varchar(32)\n        ---\n        attribute_value='': varchar(2000)\n        attribute_blob=null: longblob\n        \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.Session.Attribute", "title": "<code>Attribute</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Additional feature of interest for a session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>attribute_name</code> <code> varchar(32) </code> <p>Name shared across instances of attribute</p> <code>attribute_value</code> <code> varchar(2000), optional </code> <p>Attribute value</p> <code>attribute_blob</code> <code>longblob</code> <p>Optional data store field</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        attribute_name ( varchar(32) ): Name shared across instances of attribute\n        attribute_value ( varchar(2000), optional ):  Attribute value\n        attribute_blob (longblob, optional): Optional data store field\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    attribute_name: varchar(32)\n    ---\n    attribute_value='': varchar(2000)\n    attribute_blob=null: longblob\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionDirectory", "title": "<code>SessionDirectory</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Relative path information for files related to a given session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_dir</code> <code> varchar(256) </code> <p>Path to the data directory for a session</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionDirectory(dj.Manual):\n\"\"\"Relative path information for files related to a given session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_dir ( varchar(256) ): Path to the data directory for a session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_dir: varchar(256) # Path to the data directory for a session\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionExperimenter", "title": "<code>SessionExperimenter</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Individual(s) conducting the session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>Experimenter</code> <code>foreign key</code> <p>Key for Experimenter table</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionExperimenter(dj.Manual):\n\"\"\"Individual(s) conducting the session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        Experimenter (foreign key): Key for Experimenter table\n    \"\"\"\n\n    definition = \"\"\"\n    # Individual(s) conducting the session\n    -&gt; Session\n    -&gt; Experimenter\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionNote", "title": "<code>SessionNote</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Additional notes related to a given session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_note</code> <code> varchar(1024) </code> <p>Additional notes</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionNote(dj.Manual):\n\"\"\"Additional notes related to a given session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_note ( varchar(1024) ): Additional notes\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_note: varchar(1024)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.ProjectSession", "title": "<code>ProjectSession</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Table linking upstream Projects with Session</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Key for Project table</p> <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass ProjectSession(dj.Manual):\n\"\"\"Table linking upstream Projects with Session\n\n    Attributes:\n        Project (foreign key): Key for Project table\n        Session (foreign key): Key for Session table\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    -&gt; Session\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/", "title": "session_with_id.py", "text": ""}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.activate", "title": "<code>activate(schema_name, create_schema=True, create_tables=True, linking_module=None)</code>", "text": "<p>Activate this schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_name</code> <code>str</code> <p>schema name on the database server</p> required <code>create_schema</code> <code>bool</code> <p>when True (default), create schema in the database if it                 does not yet exist.</p> <code>True</code> <code>create_tables</code> <code>str</code> <p>when True (default), create schema tables in the database                  if they do not yet exist.</p> <code>True</code> <code>linking_module</code> <code>str</code> <p>a module (or name) containing the required dependencies.</p> <code>None</code> <p>Dependencies:</p> Upstream tables <p>Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session               To supply from element-lab add <code>Experimenter = lab.User</code>               to your <code>workflow/pipeline.py</code> before <code>session.activate()</code></p> Source code in <code>element_session/session_with_id.py</code> <pre><code>def activate(\n    schema_name,\n    create_schema: bool = True,\n    create_tables: bool = True,\n    linking_module: str = None,\n):\n\"\"\"Activate this schema.\n\n    Args:\n        schema_name (str): schema name on the database server\n        create_schema (bool): when True (default), create schema in the database if it\n                            does not yet exist.\n        create_tables (str): when True (default), create schema tables in the database\n                             if they do not yet exist.\n        linking_module (str): a module (or name) containing the required dependencies.\n\n    Dependencies:\n    Upstream tables:\n        Subject: the subject with which an experimental session is associated\n        Project: the project with which experimental sessions are associated\n        Experimenter: the experimenter(s) participating in a given session\n                      To supply from element-lab add `Experimenter = lab.User`\n                      to your `workflow/pipeline.py` before `session.activate()`\n    \"\"\"\n    if isinstance(linking_module, str):\n        linking_module = importlib.import_module(linking_module)\n    assert inspect.ismodule(\n        linking_module\n    ), \"The argument 'dependency' must be a module's name or a module\"\n\n    global _linking_module\n    _linking_module = linking_module\n\n    schema.activate(\n        schema_name,\n        create_schema=create_schema,\n        create_tables=create_tables,\n        add_objects=linking_module.__dict__,\n    )\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.Session", "title": "<code>Session</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Central Session table</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Key for Subject table</p> <code>session_id</code> <code>int</code> <p>Unique numeric session ID</p> <code>session_datetime</code> <code>datetime</code> <p>date and time of the session</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>@schema\nclass Session(dj.Manual):\n\"\"\"Central Session table\n\n    Attributes:\n        Subject (foreign key): Key for Subject table\n        session_id (int): Unique numeric session ID\n        session_datetime (datetime): date and time of the session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Subject\n    session_id: int\n    ---\n    session_datetime: datetime\n    \"\"\"\n\n    class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n        Attributes:\n            Session (foreign key): Key for Session table\n            attribute_name ( varchar(32) ): Name shared across instances of attribute\n            attribute_value ( varchar(2000), optional ):  Attribute value\n            attribute_blob (longblob, optional): Optional data store field\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        attribute_name: varchar(32)\n        ---\n        attribute_value='': varchar(2000)\n        attribute_blob=null: longblob\n        \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.Session.Attribute", "title": "<code>Attribute</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Additional feature of interest for a session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>attribute_name</code> <code> varchar(32) </code> <p>Name shared across instances of attribute</p> <code>attribute_value</code> <code> varchar(2000), optional </code> <p>Attribute value</p> <code>attribute_blob</code> <code>longblob</code> <p>Optional data store field</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        attribute_name ( varchar(32) ): Name shared across instances of attribute\n        attribute_value ( varchar(2000), optional ):  Attribute value\n        attribute_blob (longblob, optional): Optional data store field\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    attribute_name: varchar(32)\n    ---\n    attribute_value='': varchar(2000)\n    attribute_blob=null: longblob\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionDirectory", "title": "<code>SessionDirectory</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Relative path information for files related to a given session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_dir</code> <code> varchar(256) </code> <p>Path to the data directory for a session</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>@schema\nclass SessionDirectory(dj.Manual):\n\"\"\"Relative path information for files related to a given session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_dir ( varchar(256) ): Path to the data directory for a session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_dir: varchar(256) # Path to the data directory for a session\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionExperimenter", "title": "<code>SessionExperimenter</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Individual(s) conducting the session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>Experimenter</code> <code>foreign key</code> <p>Key for Experimenter table</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>@schema\nclass SessionExperimenter(dj.Manual):\n\"\"\"Individual(s) conducting the session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        Experimenter (foreign key): Key for Experimenter table\n    \"\"\"\n\n    definition = \"\"\"\n    # Individual(s) conducting the session\n    -&gt; Session\n    -&gt; Experimenter\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionNote", "title": "<code>SessionNote</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Additional notes related to a given session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_note</code> <code> varchar(1024) </code> <p>: Additional notes</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>@schema\nclass SessionNote(dj.Manual):\n\"\"\"Additional notes related to a given session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_note ( varchar(1024) ): : Additional notes\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_note: varchar(1024)\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.ProjectSession", "title": "<code>ProjectSession</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Table linking upstream Projects with Session</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Key for Project table</p> <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> Source code in <code>element_session/session_with_id.py</code> <pre><code>@schema\nclass ProjectSession(dj.Manual):\n\"\"\"Table linking upstream Projects with Session\n\n    Attributes:\n        Project (foreign key): Key for Project table\n        Session (foreign key): Key for Session table\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    -&gt; Session\n    \"\"\"\n</code></pre>"}, {"location": "api/element_session/version/", "title": "version.py", "text": "<p>Package metadata.</p>"}, {"location": "api/element_session/export/nwb/", "title": "nwb.py", "text": ""}, {"location": "api/element_session/export/nwb/#element_session.export.nwb.session_to_nwb", "title": "<code>session_to_nwb(session_key, lab_key=None, project_key=None, protocol_key=None, additional_nwbfile_kwargs=None)</code>", "text": "<p>Return subject and session metadata ass NWBFile object</p> <p>Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session.</p> Example <p>session_to_nwb(     session_key={'subject': 'subject5',         'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)},     lab_key={\"lab\": \"LabA\"}     )</p> Element to NWB Mappings <p>session.Session::KEY -&gt; NWBFile.session_id  </p> <p>session.Session::session_datetime -&gt; NWBFile.session_start_time </p> <p>session.SessionNote::session_note -&gt; NWBFile.session_description </p> <p>session.SessionExperimenter::user -&gt; NWBFile.experimenter </p> <p>subject.Subject::subject -&gt; NWBFile.subject.subject_id </p> <p>subject.Subject::sex -&gt; NWBFile.subject.sex </p> <p>lab.Lab::institution -&gt; NWBFile.institution </p> <p>lab.Lab::lab_name -&gt; NWBFile.lab </p> <p>lab.Protocol::protocol -&gt; NWBFile.protocol </p> <p>lab.Protocol::protocol_description -&gt; NWBFile.notes </p> <p>lab.Project::project_description -&gt; NWBFile.experiment_description </p> <p>lab.ProjectKeywords.keyword -&gt; NWBFile.keywords </p> <p>lab.ProjectPublication.publication -&gt; NWBFile.related_publications </p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>dict</code> <p>Key for session.Session. Assumes session_datetime is in UTC time zone.</p> required <code>lab_key</code> <code>dict</code> <p>Key for lab.Lab. Defaults to None.</p> <code>None</code> <code>project_key</code> <code>dict</code> <p>Key for lab.Project. Defaults to None.</p> <code>None</code> <code>protocol_key</code> <code>dict</code> <p>Key for Lab.Protocol. Defaults to None.</p> <code>None</code> <code>additional_nwbfile_kwargs</code> <code>dict</code> <p>Optionally overwrite or add fields to NWBFile. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pynwb.NWBFile</code> <p>pynwb.NWBFile: NWB file object</p> Source code in <code>element_session/export/nwb.py</code> <pre><code>def session_to_nwb(\n    session_key: dict,\n    lab_key: dict = None,\n    project_key: dict = None,\n    protocol_key: dict = None,\n    additional_nwbfile_kwargs=None,\n) -&gt; pynwb.NWBFile:\n\"\"\"Return subject and session metadata ass NWBFile object\n\n    Gather session- and subject-level metadata and use it to create an NWBFile. If there\n    is no subject_to_nwb export function in the current namespace, subject_id will be\n    inferred from the set of primary attributes in the Subject table upstream of\n    Session.\n\n    Example:\n        session_to_nwb(\n            session_key={'subject': 'subject5',\n                'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)},\n            lab_key={\"lab\": \"LabA\"}\n            )\n\n    Element to NWB Mappings:\n        session.Session::KEY -&gt; NWBFile.session_id  \\n\n        session.Session::session_datetime -&gt; NWBFile.session_start_time \\n\n        session.SessionNote::session_note -&gt; NWBFile.session_description \\n\n        session.SessionExperimenter::user -&gt; NWBFile.experimenter \\n\n        subject.Subject::subject -&gt; NWBFile.subject.subject_id \\n\n        subject.Subject::sex -&gt; NWBFile.subject.sex \\n\n        lab.Lab::institution -&gt; NWBFile.institution \\n\n        lab.Lab::lab_name -&gt; NWBFile.lab \\n\n        lab.Protocol::protocol -&gt; NWBFile.protocol \\n\n        lab.Protocol::protocol_description -&gt; NWBFile.notes \\n\n        lab.Project::project_description -&gt; NWBFile.experiment_description \\n\n        lab.ProjectKeywords.keyword -&gt; NWBFile.keywords \\n\n        lab.ProjectPublication.publication -&gt; NWBFile.related_publications \\n\n\n    Args:\n        session_key (dict): Key for session.Session.\n            Assumes session_datetime is in UTC time zone.\n        lab_key (dict, optional): Key for lab.Lab. Defaults to None.\n        project_key (dict, optional): Key for lab.Project. Defaults to None.\n        protocol_key (dict, optional): Key for Lab.Protocol. Defaults to None.\n        additional_nwbfile_kwargs (dict, optional): Optionally overwrite or add fields\n            to NWBFile. Defaults to None.\n\n    Returns:\n        pynwb.NWBFile: NWB file object\n    \"\"\"\n\n    # ensure only one session key is entered\n    session_key = (session.Session &amp; session_key).fetch1(\"KEY\")\n\n    session_identifier = {\n        k: v.isoformat() if isinstance(v, datetime.datetime) else v\n        for k, v in session_key.items()\n    }\n\n    nwbfile_kwargs = dict(\n        session_id=\"_\".join(session_identifier.values()),\n        identifier=str(uuid4()),\n    )\n\n    session_info = (\n        (session.Session &amp; session_key).join(session.SessionNote, left=True).fetch1()\n    )\n\n    nwbfile_kwargs.update(\n        session_start_time=session_info[\"session_datetime\"].astimezone(\n            datetime.timezone.utc\n        )\n    )\n\n    nwbfile_kwargs.update(session_description=session_info.get(\"session_note\", \"\"))\n\n    experimenters = (session.SessionExperimenter &amp; session_key).fetch(\"user\")\n\n    nwbfile_kwargs.update(experimenter=list(experimenters) or None)\n\n    subject_to_nwb = getattr(session._linking_module, \"subject_to_nwb\", False)\n\n    if subject_to_nwb:\n        nwbfile_kwargs.update(subject=subject_to_nwb(session_key))\n    else:\n        subject_id = \"_\".join(\n            (getattr(session._linking_module, \"Subject\") &amp; session_key)\n            .fetch1(\"KEY\")\n            .values()\n        )\n        nwbfile_kwargs.update(subject=pynwb.file.Subject(subject_id=subject_id))\n\n    if any([lab_key, project_key, protocol_key]):\n        element_lab_to_nwb_dict = getattr(\n            session._linking_module, \"element_lab_to_nwb_dict\", False\n        )\n\n        if element_lab_to_nwb_dict:\n            nwbfile_kwargs.update(\n                element_lab_to_nwb_dict(\n                    lab_key=lab_key, project_key=project_key, protocol_key=protocol_key\n                )\n            )\n\n    if additional_nwbfile_kwargs is not None:\n        nwbfile_kwargs.update(additional_nwbfile_kwargs)\n\n    return pynwb.NWBFile(**nwbfile_kwargs)\n</code></pre>"}, {"location": "api/workflow_session/export/", "title": "export.py", "text": ""}, {"location": "api/workflow_session/export/#workflow_session.export.session_to_nwb", "title": "<code>session_to_nwb(session_key, lab_key=None, project_key=None, protocol_key=None, additional_nwbfile_kwargs=None)</code>", "text": "<p>Return subject and session metadata ass NWBFile object</p> <p>Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session.</p> Example <p>session_to_nwb(     session_key={'subject': 'subject5',         'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)},     lab_key={\"lab\": \"LabA\"}     )</p> Element to NWB Mappings <p>session.Session::KEY -&gt; NWBFile.session_id  </p> <p>session.Session::session_datetime -&gt; NWBFile.session_start_time </p> <p>session.SessionNote::session_note -&gt; NWBFile.session_description </p> <p>session.SessionExperimenter::user -&gt; NWBFile.experimenter </p> <p>subject.Subject::subject -&gt; NWBFile.subject.subject_id </p> <p>subject.Subject::sex -&gt; NWBFile.subject.sex </p> <p>lab.Lab::institution -&gt; NWBFile.institution </p> <p>lab.Lab::lab_name -&gt; NWBFile.lab </p> <p>lab.Protocol::protocol -&gt; NWBFile.protocol </p> <p>lab.Protocol::protocol_description -&gt; NWBFile.notes </p> <p>lab.Project::project_description -&gt; NWBFile.experiment_description </p> <p>lab.ProjectKeywords.keyword -&gt; NWBFile.keywords </p> <p>lab.ProjectPublication.publication -&gt; NWBFile.related_publications </p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>dict</code> <p>Key for session.Session. Assumes session_datetime is in UTC time zone.</p> required <code>lab_key</code> <code>dict</code> <p>Key for lab.Lab. Defaults to None.</p> <code>None</code> <code>project_key</code> <code>dict</code> <p>Key for lab.Project. Defaults to None.</p> <code>None</code> <code>protocol_key</code> <code>dict</code> <p>Key for Lab.Protocol. Defaults to None.</p> <code>None</code> <code>additional_nwbfile_kwargs</code> <code>dict</code> <p>Optionally overwrite or add fields to NWBFile. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pynwb.NWBFile</code> <p>pynwb.NWBFile: NWB file object</p> Source code in <code>element_session/export/nwb.py</code> <pre><code>def session_to_nwb(\n    session_key: dict,\n    lab_key: dict = None,\n    project_key: dict = None,\n    protocol_key: dict = None,\n    additional_nwbfile_kwargs=None,\n) -&gt; pynwb.NWBFile:\n\"\"\"Return subject and session metadata ass NWBFile object\n\n    Gather session- and subject-level metadata and use it to create an NWBFile. If there\n    is no subject_to_nwb export function in the current namespace, subject_id will be\n    inferred from the set of primary attributes in the Subject table upstream of\n    Session.\n\n    Example:\n        session_to_nwb(\n            session_key={'subject': 'subject5',\n                'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)},\n            lab_key={\"lab\": \"LabA\"}\n            )\n\n    Element to NWB Mappings:\n        session.Session::KEY -&gt; NWBFile.session_id  \\n\n        session.Session::session_datetime -&gt; NWBFile.session_start_time \\n\n        session.SessionNote::session_note -&gt; NWBFile.session_description \\n\n        session.SessionExperimenter::user -&gt; NWBFile.experimenter \\n\n        subject.Subject::subject -&gt; NWBFile.subject.subject_id \\n\n        subject.Subject::sex -&gt; NWBFile.subject.sex \\n\n        lab.Lab::institution -&gt; NWBFile.institution \\n\n        lab.Lab::lab_name -&gt; NWBFile.lab \\n\n        lab.Protocol::protocol -&gt; NWBFile.protocol \\n\n        lab.Protocol::protocol_description -&gt; NWBFile.notes \\n\n        lab.Project::project_description -&gt; NWBFile.experiment_description \\n\n        lab.ProjectKeywords.keyword -&gt; NWBFile.keywords \\n\n        lab.ProjectPublication.publication -&gt; NWBFile.related_publications \\n\n\n    Args:\n        session_key (dict): Key for session.Session.\n            Assumes session_datetime is in UTC time zone.\n        lab_key (dict, optional): Key for lab.Lab. Defaults to None.\n        project_key (dict, optional): Key for lab.Project. Defaults to None.\n        protocol_key (dict, optional): Key for Lab.Protocol. Defaults to None.\n        additional_nwbfile_kwargs (dict, optional): Optionally overwrite or add fields\n            to NWBFile. Defaults to None.\n\n    Returns:\n        pynwb.NWBFile: NWB file object\n    \"\"\"\n\n    # ensure only one session key is entered\n    session_key = (session.Session &amp; session_key).fetch1(\"KEY\")\n\n    session_identifier = {\n        k: v.isoformat() if isinstance(v, datetime.datetime) else v\n        for k, v in session_key.items()\n    }\n\n    nwbfile_kwargs = dict(\n        session_id=\"_\".join(session_identifier.values()),\n        identifier=str(uuid4()),\n    )\n\n    session_info = (\n        (session.Session &amp; session_key).join(session.SessionNote, left=True).fetch1()\n    )\n\n    nwbfile_kwargs.update(\n        session_start_time=session_info[\"session_datetime\"].astimezone(\n            datetime.timezone.utc\n        )\n    )\n\n    nwbfile_kwargs.update(session_description=session_info.get(\"session_note\", \"\"))\n\n    experimenters = (session.SessionExperimenter &amp; session_key).fetch(\"user\")\n\n    nwbfile_kwargs.update(experimenter=list(experimenters) or None)\n\n    subject_to_nwb = getattr(session._linking_module, \"subject_to_nwb\", False)\n\n    if subject_to_nwb:\n        nwbfile_kwargs.update(subject=subject_to_nwb(session_key))\n    else:\n        subject_id = \"_\".join(\n            (getattr(session._linking_module, \"Subject\") &amp; session_key)\n            .fetch1(\"KEY\")\n            .values()\n        )\n        nwbfile_kwargs.update(subject=pynwb.file.Subject(subject_id=subject_id))\n\n    if any([lab_key, project_key, protocol_key]):\n        element_lab_to_nwb_dict = getattr(\n            session._linking_module, \"element_lab_to_nwb_dict\", False\n        )\n\n        if element_lab_to_nwb_dict:\n            nwbfile_kwargs.update(\n                element_lab_to_nwb_dict(\n                    lab_key=lab_key, project_key=project_key, protocol_key=protocol_key\n                )\n            )\n\n    if additional_nwbfile_kwargs is not None:\n        nwbfile_kwargs.update(additional_nwbfile_kwargs)\n\n    return pynwb.NWBFile(**nwbfile_kwargs)\n</code></pre>"}, {"location": "api/workflow_session/ingest/", "title": "ingest.py", "text": ""}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_lab", "title": "<code>ingest_lab(lab_csv_path='./user_data/lab/labs.csv', project_csv_path='./user_data/lab/projects.csv', publication_csv_path='./user_data/lab/publications.csv', keyword_csv_path='./user_data/lab/keywords.csv', protocol_csv_path='./user_data/lab/protocols.csv', users_csv_path='./user_data/lab/users.csv', project_user_csv_path='./user_data/lab/project_users.csv', sources_csv_path='./user_data/lab/sources.csv', skip_duplicates=True, verbose=True)</code>", "text": "<p>Insert data from a CSVs into their corresponding lab schema tables.</p> <p>By default, uses data from workflow_session/user_data/lab/</p> <p>Parameters:</p> Name Type Description Default <code>lab_csv_path</code> <code>str</code> <p>relative path of lab csv</p> <code>'./user_data/lab/labs.csv'</code> <code>project_csv_path</code> <code>str</code> <p>relative path of project csv</p> <code>'./user_data/lab/projects.csv'</code> <code>publication_csv_path</code> <code>str</code> <p>relative path of publication csv</p> <code>'./user_data/lab/publications.csv'</code> <code>keyword_csv_path</code> <code>str</code> <p>relative path of keyword csv</p> <code>'./user_data/lab/keywords.csv'</code> <code>protocol_csv_path</code> <code>str</code> <p>relative path of protocol csv</p> <code>'./user_data/lab/protocols.csv'</code> <code>users_csv_path</code> <code>str</code> <p>relative path of users csv</p> <code>'./user_data/lab/users.csv'</code> <code>project_user_csv_path</code> <code>str</code> <p>relative path of project users csv</p> <code>'./user_data/lab/project_users.csv'</code> <code>sources_csv_path</code> <code>str</code> <p>relative path of sources csv</p> <code>'./user_data/lab/sources.csv'</code> <code>skip_duplicates</code> <code>bool</code> <p>Default True. See DataJoint <code>insert</code> function</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>Print number inserted (i.e., table length change)</p> <code>True</code> Source code in <code>workflow_session/ingest.py</code> <pre><code>def ingest_lab(\n    lab_csv_path: str = \"./user_data/lab/labs.csv\",\n    project_csv_path: str = \"./user_data/lab/projects.csv\",\n    publication_csv_path: str = \"./user_data/lab/publications.csv\",\n    keyword_csv_path: str = \"./user_data/lab/keywords.csv\",\n    protocol_csv_path: str = \"./user_data/lab/protocols.csv\",\n    users_csv_path: str = \"./user_data/lab/users.csv\",\n    project_user_csv_path: str = \"./user_data/lab/project_users.csv\",\n    sources_csv_path: str = \"./user_data/lab/sources.csv\",\n    skip_duplicates: bool = True,\n    verbose: bool = True,\n):\n\"\"\"Insert data from a CSVs into their corresponding lab schema tables.\n\n    By default, uses data from workflow_session/user_data/lab/\n\n    Args:\n        lab_csv_path (str):            relative path of lab csv\n        project_csv_path (str):        relative path of project csv\n        publication_csv_path (str):    relative path of publication csv\n        keyword_csv_path (str):        relative path of keyword csv\n        protocol_csv_path (str):       relative path of protocol csv\n        users_csv_path (str):          relative path of users csv\n        project_user_csv_path (str):   relative path of project users csv\n        sources_csv_path (str):        relative path of sources csv\n        skip_duplicates (bool): Default True. See DataJoint `insert` function\n        verbose (bool): Print number inserted (i.e., table length change)\n    \"\"\"\n\n    # List with repeats for when mult dj.tables fed by same CSV\n    csvs = [\n        lab_csv_path,  # 0\n        lab_csv_path,  # 1\n        project_csv_path,  # 2\n        project_csv_path,  # 3\n        publication_csv_path,  # 4\n        keyword_csv_path,  # 5\n        protocol_csv_path,  # 6\n        protocol_csv_path,  # 7\n        users_csv_path,  # 8\n        users_csv_path,  # 9\n        users_csv_path,  # 10\n        project_user_csv_path,  # 11\n        sources_csv_path,  # 12\n    ]\n    tables = [\n        lab.Lab(),  # 0\n        lab.Location(),  # 1\n        lab.Project(),  # 2\n        lab.ProjectSourceCode(),  # 3\n        lab.ProjectPublication(),  # 4\n        lab.ProjectKeywords(),  # 5\n        lab.ProtocolType(),  # 6\n        lab.Protocol(),  # 7\n        lab.UserRole(),  # 8\n        lab.User(),  # 9\n        lab.LabMembership(),  # 10\n        lab.ProjectUser(),  # 11\n        lab.Source(),  # 13\n    ]\n\n    ingest_csv_to_table(csvs, tables, skip_duplicates=skip_duplicates, verbose=verbose)\n</code></pre>"}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_subjects", "title": "<code>ingest_subjects(subject_csv_path='./user_data/subject/subjects.csv', subject_part_csv_path='./user_data/subject/subjects_part.csv', allele_csv_path='./user_data/subject/allele.csv', cage_csv_path='./user_data/subject/cage.csv', breedingpair_csv_path='./user_data/subject/breedingpair.csv', genotype_test_csv_path='./user_data/subject/genotype_test.csv', line_csv_path='./user_data/subject/line.csv', strain_csv_path='./user_data/subject/strain.csv', zygosity_csv_path='./user_data/subject/zygosity.csv', skip_duplicates=True, verbose=True)</code>", "text": "<p>Insert data from a subject csv into corresponding subject schema tables</p> <p>By default, uses data from workflow_session/user_data/subject/</p> <p>Parameters:</p> Name Type Description Default <code>subject_csv_path</code> <code>str</code> <p>relative path of csv for subject data</p> <code>'./user_data/subject/subjects.csv'</code> <code>subject_part_csv_path</code> <code>str</code> <p>relative path of csv for subject part tables</p> <code>'./user_data/subject/subjects_part.csv'</code> <code>allele_csv_path</code> <code>str</code> <p>relative path of csv for alleles</p> <code>'./user_data/subject/allele.csv'</code> <code>cage_csv_path</code> <code>str</code> <p>relative path of csv for cages</p> <code>'./user_data/subject/cage.csv'</code> <code>breedingpair_csv_path</code> <code>str</code> <p>relative path of csv for breeding pairs</p> <code>'./user_data/subject/breedingpair.csv'</code> <code>genotype_test_csv_path</code> <code>str</code> <p>relative path of csv for genotype</p> <code>'./user_data/subject/genotype_test.csv'</code> <code>line_csv_path</code> <code>str</code> <p>relative path of csv for line</p> <code>'./user_data/subject/line.csv'</code> <code>strain_csv_path</code> <code>str</code> <p>relative path of csv for strain</p> <code>'./user_data/subject/strain.csv'</code> <code>zygosity_csv_path</code> <code>str</code> <p>relative path of csv for zygotsky</p> <code>'./user_data/subject/zygosity.csv'</code> <code>skip_duplicates</code> <code>bool</code> <p>Default True. See DataJoint <code>insert</code> function</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>Print number inserted (i.e., table length change)</p> <code>True</code> Source code in <code>workflow_session/ingest.py</code> <pre><code>def ingest_subjects(\n    subject_csv_path: str = \"./user_data/subject/subjects.csv\",\n    subject_part_csv_path: str = \"./user_data/subject/subjects_part.csv\",\n    allele_csv_path: str = \"./user_data/subject/allele.csv\",\n    cage_csv_path: str = \"./user_data/subject/cage.csv\",\n    breedingpair_csv_path: str = \"./user_data/subject/breedingpair.csv\",\n    genotype_test_csv_path: str = \"./user_data/subject/genotype_test.csv\",\n    line_csv_path: str = \"./user_data/subject/line.csv\",\n    strain_csv_path: str = \"./user_data/subject/strain.csv\",\n    zygosity_csv_path: str = \"./user_data/subject/zygosity.csv\",\n    skip_duplicates: bool = True,\n    verbose: bool = True,\n):\n\"\"\"Insert data from a subject csv into corresponding subject schema tables\n\n    By default, uses data from workflow_session/user_data/subject/\n\n    Args:\n        subject_csv_path (str):        relative path of csv for subject data\n        subject_part_csv_path (str):   relative path of csv for subject part tables\n        allele_csv_path (str):         relative path of csv for alleles\n        cage_csv_path (str):           relative path of csv for cages\n        breedingpair_csv_path (str):   relative path of csv for breeding pairs\n        genotype_test_csv_path (str):  relative path of csv for genotype\n        line_csv_path (str):           relative path of csv for line\n        strain_csv_path (str):         relative path of csv for strain\n        zygosity_csv_path (str):       relative path of csv for zygotsky\n        skip_duplicates (bool): Default True. See DataJoint `insert` function\n        verbose (bool): Print number inserted (i.e., table length change)\n    \"\"\"\n    csvs = [\n        subject_csv_path,  # 0\n        subject_csv_path,  # 1\n        subject_csv_path,  # 2\n        subject_part_csv_path,  # 3\n        subject_part_csv_path,  # 4\n        subject_part_csv_path,  # 5\n        strain_csv_path,  # 6\n        allele_csv_path,  # 7\n        allele_csv_path,  # 8\n        allele_csv_path,  # 9\n        allele_csv_path,  # 10\n        line_csv_path,  # 11\n        line_csv_path,  # 12\n        subject_part_csv_path,  # 13\n        subject_part_csv_path,  # 14\n        subject_part_csv_path,  # 15\n        zygosity_csv_path,  # 16\n        breedingpair_csv_path,  # 17\n        breedingpair_csv_path,  # 18\n        breedingpair_csv_path,  # 19\n        breedingpair_csv_path,  # 20\n        breedingpair_csv_path,  # 21\n        breedingpair_csv_path,  # 22\n        cage_csv_path,  # 23\n        cage_csv_path,  # 24\n        genotype_test_csv_path,  # 25\n    ]\n    tables = [\n        subject.Subject(),  # 0\n        subject.SubjectDeath(),  # 1\n        subject.SubjectCullMethod(),  # 2\n        subject.Subject.Protocol(),  # 3\n        subject.Subject.User(),  # 4\n        subject.Subject.Lab(),  # 5\n        subject.Strain(),  # 6\n        subject.Allele(),  # 7\n        subject.Allele.Source(),  # 8\n        genotyping.Sequence(),  # 9\n        genotyping.AlleleSequence(),  # 10\n        subject.Line(),  # 11\n        subject.Line.Allele(),  # 12\n        subject.Subject.Line(),  # 13\n        subject.Subject.Strain(),  # 14\n        subject.Subject.Source(),  # 15\n        subject.Zygosity(),  # 16\n        genotyping.BreedingPair(),  # 17\n        genotyping.BreedingPair.Father(),  # 18\n        genotyping.BreedingPair.Mother(),  # 19\n        genotyping.Litter(),  # 20\n        genotyping.Weaning(),  # 21\n        genotyping.SubjectLitter(),  # 22\n        genotyping.Cage(),  # 23\n        genotyping.SubjectCaging(),  # 24\n        genotyping.GenotypeTest(),  # 25\n    ]\n\n    ingest_csv_to_table(csvs, tables, skip_duplicates=skip_duplicates, verbose=verbose)\n</code></pre>"}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_sessions", "title": "<code>ingest_sessions(session_csv_path='./user_data/session/sessions.csv', skip_duplicates=True, verbose=True)</code>", "text": "<p>Inserts data from a sessions csv into corresponding session schema tables By default, uses data from workflow_session/user_data/session/     session_csv_path (str):     relative path of session csv     skip_duplicates (bool): Default True. See DataJoint <code>insert</code> function     verbose (bool): Print number inserted (i.e., table length change)</p> Source code in <code>workflow_session/ingest.py</code> <pre><code>def ingest_sessions(\n    session_csv_path: str = \"./user_data/session/sessions.csv\",\n    skip_duplicates: bool = True,\n    verbose: bool = True,\n):\n\"\"\"\n    Inserts data from a sessions csv into corresponding session schema tables\n    By default, uses data from workflow_session/user_data/session/\n        session_csv_path (str):     relative path of session csv\n        skip_duplicates (bool): Default True. See DataJoint `insert` function\n        verbose (bool): Print number inserted (i.e., table length change)\n    \"\"\"\n    csvs = [\n        session_csv_path,\n        session_csv_path,\n        session_csv_path,\n        session_csv_path,\n        session_csv_path,\n    ]\n    tables = [\n        session.Session(),\n        session.SessionDirectory(),\n        session.SessionNote(),\n        session.ProjectSession(),\n        session.SessionExperimenter(),\n    ]\n\n    ingest_csv_to_table(csvs, tables, skip_duplicates=skip_duplicates, verbose=verbose)\n</code></pre>"}, {"location": "api/workflow_session/paths/", "title": "paths.py", "text": ""}, {"location": "api/workflow_session/paths/#workflow_session.paths.get_session_directory", "title": "<code>get_session_directory(session_key)</code>", "text": "<p>Return relative path from SessionDirectory table given key</p> <p>Parameters:</p> Name Type Description Default <code>session_key</code> <code>dict</code> <p>Key uniquely identifying a session</p> required <p>Returns:</p> Name Type Description <code>path</code> <code>str</code> <p>Relative path of session directory</p> Source code in <code>workflow_session/paths.py</code> <pre><code>def get_session_directory(session_key: dict) -&gt; str:\n\"\"\"Return relative path from SessionDirectory table given key\n\n    Args:\n        session_key (dict): Key uniquely identifying a session\n\n    Returns:\n        path (str): Relative path of session directory\n    \"\"\"\n    from .pipeline import session\n\n    session_dir = (session.SessionDirectory &amp; session_key).fetch1(\"session_dir\")\n    return session_dir\n</code></pre>"}, {"location": "api/workflow_session/pipeline/", "title": "pipeline.py", "text": ""}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.Session", "title": "<code>Session</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Central Session table</p> <p>Attributes:</p> Name Type Description <code>Subject</code> <code>foreign key</code> <p>Key for Subject table</p> <code>session_datetime</code> <code>datetime</code> <p>date and time of the session</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass Session(dj.Manual):\n\"\"\"Central Session table\n\n    Attributes:\n        Subject (foreign key): Key for Subject table\n        session_datetime (datetime): date and time of the session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Subject\n    session_datetime: datetime\n    \"\"\"\n\n    class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n        Attributes:\n            Session (foreign key): Key for Session table\n            attribute_name ( varchar(32) ): Name shared across instances of attribute\n            attribute_value ( varchar(2000), optional ):  Attribute value\n            attribute_blob (longblob, optional): Optional data store field\n        \"\"\"\n\n        definition = \"\"\"\n        -&gt; master\n        attribute_name: varchar(32)\n        ---\n        attribute_value='': varchar(2000)\n        attribute_blob=null: longblob\n        \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/pipeline/#element_session.session_with_datetime.Session.Attribute", "title": "<code>Attribute</code>", "text": "<p>         Bases: <code>dj.Part</code></p> <p>Additional feature of interest for a session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>attribute_name</code> <code> varchar(32) </code> <p>Name shared across instances of attribute</p> <code>attribute_value</code> <code> varchar(2000), optional </code> <p>Attribute value</p> <code>attribute_blob</code> <code>longblob</code> <p>Optional data store field</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>class Attribute(dj.Part):\n\"\"\"Additional feature of interest for a session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        attribute_name ( varchar(32) ): Name shared across instances of attribute\n        attribute_value ( varchar(2000), optional ):  Attribute value\n        attribute_blob (longblob, optional): Optional data store field\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; master\n    attribute_name: varchar(32)\n    ---\n    attribute_value='': varchar(2000)\n    attribute_blob=null: longblob\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionDirectory", "title": "<code>SessionDirectory</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Relative path information for files related to a given session.</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_dir</code> <code> varchar(256) </code> <p>Path to the data directory for a session</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionDirectory(dj.Manual):\n\"\"\"Relative path information for files related to a given session.\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_dir ( varchar(256) ): Path to the data directory for a session\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_dir: varchar(256) # Path to the data directory for a session\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionExperimenter", "title": "<code>SessionExperimenter</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Individual(s) conducting the session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>Experimenter</code> <code>foreign key</code> <p>Key for Experimenter table</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionExperimenter(dj.Manual):\n\"\"\"Individual(s) conducting the session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        Experimenter (foreign key): Key for Experimenter table\n    \"\"\"\n\n    definition = \"\"\"\n    # Individual(s) conducting the session\n    -&gt; Session\n    -&gt; Experimenter\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionNote", "title": "<code>SessionNote</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Additional notes related to a given session</p> <p>Attributes:</p> Name Type Description <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> <code>session_note</code> <code> varchar(1024) </code> <p>Additional notes</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass SessionNote(dj.Manual):\n\"\"\"Additional notes related to a given session\n\n    Attributes:\n        Session (foreign key): Key for Session table\n        session_note ( varchar(1024) ): Additional notes\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Session\n    ---\n    session_note: varchar(1024)\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.ProjectSession", "title": "<code>ProjectSession</code>", "text": "<p>         Bases: <code>dj.Manual</code></p> <p>Table linking upstream Projects with Session</p> <p>Attributes:</p> Name Type Description <code>Project</code> <code>foreign key</code> <p>Key for Project table</p> <code>Session</code> <code>foreign key</code> <p>Key for Session table</p> Source code in <code>element_session/session_with_datetime.py</code> <pre><code>@schema\nclass ProjectSession(dj.Manual):\n\"\"\"Table linking upstream Projects with Session\n\n    Attributes:\n        Project (foreign key): Key for Project table\n        Session (foreign key): Key for Session table\n    \"\"\"\n\n    definition = \"\"\"\n    -&gt; Project\n    -&gt; Session\n    \"\"\"\n</code></pre>"}, {"location": "api/workflow_session/version/", "title": "version.py", "text": "<p>Package metadata.</p>"}]}