{"config": {"indexing": "full", "lang": ["en"], "min_search_length": 3, "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "", "text": "Element Session \u00b6 DataJoint Element for Session Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. Element Session features a DataJoint pipeline allowing for a standard approach to session management. The Element is offers options for uniquely identifying sessions either by... session_with_datetime - Recording date and time session_with_id - Numerical identifier Visit the Concepts page for more information on session management and Element Session. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Session"}, {"location": "#element-session", "text": "DataJoint Element for Session Management. DataJoint Elements collectively standardize and automate data collection and analysis for neuroscience experiments. Each Element is a modular pipeline for data storage and processing with corresponding database tables that can be combined with other Elements to assemble a fully functional pipeline. Element Session features a DataJoint pipeline allowing for a standard approach to session management. The Element is offers options for uniquely identifying sessions either by... session_with_datetime - Recording date and time session_with_id - Numerical identifier Visit the Concepts page for more information on session management and Element Session. To get started with building your data pipeline visit the Tutorials page .", "title": "Element Session"}, {"location": "changelog/", "text": "Changelog \u00b6 Observes Semantic Versioning standard and Keep a Changelog convention. 0.1.3 - Unreleased \u00b6 Add - mkdocs deployment, improved docstrings 0.1.2 - 2022-06-01 \u00b6 Bugfix - Remove is_activated schema assertion for NWB export 0.1.1 - 2022-05-10 \u00b6 Add - SessionExperimenter table Add - SessionNote table Add - session_with_id module with session primary key as integer Update - Rename session module to session_with_datetime Update - Adopt black formatting into code base 0.1.0b0 - 2021-05-07 \u00b6 Update - First beta release 0.1.0a1 - 2021-05-03 \u00b6 Add - GitHub Action release process Add - session schema", "title": "Changelog"}, {"location": "changelog/#changelog", "text": "Observes Semantic Versioning standard and Keep a Changelog convention.", "title": "Changelog"}, {"location": "changelog/#013-unreleased", "text": "Add - mkdocs deployment, improved docstrings", "title": "0.1.3 - Unreleased"}, {"location": "changelog/#012-2022-06-01", "text": "Bugfix - Remove is_activated schema assertion for NWB export", "title": "0.1.2 - 2022-06-01"}, {"location": "changelog/#011-2022-05-10", "text": "Add - SessionExperimenter table Add - SessionNote table Add - session_with_id module with session primary key as integer Update - Rename session module to session_with_datetime Update - Adopt black formatting into code base", "title": "0.1.1 - 2022-05-10"}, {"location": "changelog/#010b0-2021-05-07", "text": "Update - First beta release", "title": "0.1.0b0 - 2021-05-07"}, {"location": "changelog/#010a1-2021-05-03", "text": "Add - GitHub Action release process Add - session schema", "title": "0.1.0a1 - 2021-05-03"}, {"location": "citation/", "text": "Citation \u00b6 If your work uses Element Session, please cite the following manuscript and Research Resource Identifier (RRID). Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 DataJoint Elements ( RRID:SCR_021894 ) - Element Session (version 0.1.2)", "title": "Citation"}, {"location": "citation/#citation", "text": "If your work uses Element Session, please cite the following manuscript and Research Resource Identifier (RRID). Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358 DataJoint Elements ( RRID:SCR_021894 ) - Element Session (version 0.1.2)", "title": "Citation"}, {"location": "concepts/", "text": "Concepts \u00b6 Neuroscience experiments typically structure a repeatable protocol around a single recording session. A session might be explicitly defined as the time period in which an acquisition system is used to collect neural signal data from a unique subject. A session might include multiple recordings across data modalities or over time. Sessions are typically limited, however, to a single subject; this assumption has been encoded in the standard relationship between Element Animal and Element Session. This Element is a minimal schema with relatively few tables to describe the experiment session (e.g., data and time, experimenter, subject reference), the project in which the sessions may belong to (e.g., DOI, keywords, etc.), and the data directory for each session. Precursor Projects \u00b6 All DataJoint pipelines have some form of a session schema or tables. The session table is typically in the upstream part of the pipeline, referencing the subject and serving as a common node to which all other modalities connect and expand downstream (e.g. ephys, imaging, video tracking, behavioral events, etc.). Element Architecture \u00b6 Each node in the following diagram represents the analysis code in the workflow for Element Session and corresponding table in the database. Within the workflow, Element Session directly connects to upstream Element Animal, and indirectly connects to upstream schemas Project and User. This Element offer two schema, which differ in how sessions are uniquely identified. Researchers who wish to keep track of sessions based on when they occurred should use session_with_datetime . Researchers wo would prefer unique integer IDs can use session_with_id . subject schema \u00b6 Table Description Subject Basic information of the research subject session schema (APIs: datetime or ID ) \u00b6 Table Description Session Stores session information with unique datetimes or numerical IDs SessionDirectory A collection paths to data directory for a session SessionExperimenter A record of individual(s) conducting session SessionNote Stores notes related to sessions ProjectSession Stores session information associated with a project Roadmap \u00b6 Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add features to this Element.", "title": "Concepts"}, {"location": "concepts/#concepts", "text": "Neuroscience experiments typically structure a repeatable protocol around a single recording session. A session might be explicitly defined as the time period in which an acquisition system is used to collect neural signal data from a unique subject. A session might include multiple recordings across data modalities or over time. Sessions are typically limited, however, to a single subject; this assumption has been encoded in the standard relationship between Element Animal and Element Session. This Element is a minimal schema with relatively few tables to describe the experiment session (e.g., data and time, experimenter, subject reference), the project in which the sessions may belong to (e.g., DOI, keywords, etc.), and the data directory for each session.", "title": "Concepts"}, {"location": "concepts/#precursor-projects", "text": "All DataJoint pipelines have some form of a session schema or tables. The session table is typically in the upstream part of the pipeline, referencing the subject and serving as a common node to which all other modalities connect and expand downstream (e.g. ephys, imaging, video tracking, behavioral events, etc.).", "title": "Precursor Projects"}, {"location": "concepts/#element-architecture", "text": "Each node in the following diagram represents the analysis code in the workflow for Element Session and corresponding table in the database. Within the workflow, Element Session directly connects to upstream Element Animal, and indirectly connects to upstream schemas Project and User. This Element offer two schema, which differ in how sessions are uniquely identified. Researchers who wish to keep track of sessions based on when they occurred should use session_with_datetime . Researchers wo would prefer unique integer IDs can use session_with_id .", "title": "Element Architecture"}, {"location": "concepts/#subject-schema", "text": "Table Description Subject Basic information of the research subject", "title": "subject schema"}, {"location": "concepts/#session-schema-apis-datetime-or-id", "text": "Table Description Session Stores session information with unique datetimes or numerical IDs SessionDirectory A collection paths to data directory for a session SessionExperimenter A record of individual(s) conducting session SessionNote Stores notes related to sessions ProjectSession Stores session information associated with a project", "title": "session schema (APIs: datetime or ID)"}, {"location": "concepts/#roadmap", "text": "Further development of this Element is community driven. Upon user requests and based on guidance from the Scientific Steering Group we will add features to this Element.", "title": "Roadmap"}, {"location": "tutorials/", "text": "Tutorials \u00b6 Coming soon!", "title": "Tutorials"}, {"location": "tutorials/#tutorials", "text": "Coming soon!", "title": "Tutorials"}, {"location": "api/element_session/session_with_datetime/", "text": "activate ( schema_name , create_schema = True , create_tables = True , linking_module = None ) \u00b6 Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Source code in element_session/session_with_datetime.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def activate ( schema_name , create_schema : bool = True , create_tables : bool = True , linking_module : str = None , ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), \"The argument 'dependency' must be a module's name or a module\" global _linking_module _linking_module = linking_module schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , ) Session \u00b6 Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_datetime datetime date and time of the session Source code in element_session/session_with_datetime.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" Attribute \u00b6 Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_datetime.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" SessionDirectory \u00b6 Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_datetime.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\" SessionExperimenter \u00b6 Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_datetime.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\" SessionNote \u00b6 Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) Additional notes Source code in element_session/session_with_datetime.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\" ProjectSession \u00b6 Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_datetime.py 132 133 134 135 136 137 138 139 140 141 142 143 144 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "session_with_datetime.py"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.activate", "text": "Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Source code in element_session/session_with_datetime.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def activate ( schema_name , create_schema : bool = True , create_tables : bool = True , linking_module : str = None , ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), \"The argument 'dependency' must be a module's name or a module\" global _linking_module _linking_module = linking_module schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.Session", "text": "Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_datetime datetime date and time of the session Source code in element_session/session_with_datetime.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Session"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.Session.Attribute", "text": "Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_datetime.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Attribute"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionDirectory", "text": "Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_datetime.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\"", "title": "SessionDirectory"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionExperimenter", "text": "Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_datetime.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\"", "title": "SessionExperimenter"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.SessionNote", "text": "Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) Additional notes Source code in element_session/session_with_datetime.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\"", "title": "SessionNote"}, {"location": "api/element_session/session_with_datetime/#element_session.session_with_datetime.ProjectSession", "text": "Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_datetime.py 132 133 134 135 136 137 138 139 140 141 142 143 144 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "ProjectSession"}, {"location": "api/element_session/session_with_id/", "text": "activate ( schema_name , create_schema = True , create_tables = True , linking_module = None ) \u00b6 Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Source code in element_session/session_with_id.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def activate ( schema_name , create_schema : bool = True , create_tables : bool = True , linking_module : str = None , ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), \"The argument 'dependency' must be a module's name or a module\" global _linking_module _linking_module = linking_module schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , ) Session \u00b6 Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_id int Unique numeric session ID session_datetime datetime date and time of the session Source code in element_session/session_with_id.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_id (int): Unique numeric session ID session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_id: int --- session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" Attribute \u00b6 Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_id.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" SessionDirectory \u00b6 Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_id.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\" SessionExperimenter \u00b6 Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_id.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\" SessionNote \u00b6 Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) : Additional notes Source code in element_session/session_with_id.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): : Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\" ProjectSession \u00b6 Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_id.py 134 135 136 137 138 139 140 141 142 143 144 145 146 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "session_with_id.py"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.activate", "text": "Activate this schema. Parameters: Name Type Description Default schema_name str schema name on the database server required create_schema bool when True (default), create schema in the database if it does not yet exist. True create_tables str when True (default), create schema tables in the database if they do not yet exist. True linking_module str a module (or name) containing the required dependencies. None Dependencies: Upstream tables Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add Experimenter = lab.User to your workflow/pipeline.py before session.activate() Source code in element_session/session_with_id.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def activate ( schema_name , create_schema : bool = True , create_tables : bool = True , linking_module : str = None , ): \"\"\"Activate this schema. Args: schema_name (str): schema name on the database server create_schema (bool): when True (default), create schema in the database if it does not yet exist. create_tables (str): when True (default), create schema tables in the database if they do not yet exist. linking_module (str): a module (or name) containing the required dependencies. Dependencies: Upstream tables: Subject: the subject with which an experimental session is associated Project: the project with which experimental sessions are associated Experimenter: the experimenter(s) participating in a given session To supply from element-lab add `Experimenter = lab.User` to your `workflow/pipeline.py` before `session.activate()` \"\"\" if isinstance ( linking_module , str ): linking_module = importlib . import_module ( linking_module ) assert inspect . ismodule ( linking_module ), \"The argument 'dependency' must be a module's name or a module\" global _linking_module _linking_module = linking_module schema . activate ( schema_name , create_schema = create_schema , create_tables = create_tables , add_objects = linking_module . __dict__ , )", "title": "activate()"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.Session", "text": "Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_id int Unique numeric session ID session_datetime datetime date and time of the session Source code in element_session/session_with_id.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_id (int): Unique numeric session ID session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_id: int --- session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Session"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.Session.Attribute", "text": "Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_id.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Attribute"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionDirectory", "text": "Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_id.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\"", "title": "SessionDirectory"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionExperimenter", "text": "Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_id.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\"", "title": "SessionExperimenter"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.SessionNote", "text": "Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) : Additional notes Source code in element_session/session_with_id.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): : Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\"", "title": "SessionNote"}, {"location": "api/element_session/session_with_id/#element_session.session_with_id.ProjectSession", "text": "Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_id.py 134 135 136 137 138 139 140 141 142 143 144 145 146 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "ProjectSession"}, {"location": "api/element_session/version/", "text": "Package metadata.", "title": "version.py"}, {"location": "api/element_session/export/nwb/", "text": "session_to_nwb ( session_key , lab_key = None , project_key = None , protocol_key = None , additional_nwbfile_kwargs = None ) \u00b6 Return subject and session metadata ass NWBFile object Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session. Example session_to_nwb( session_key={'subject': 'subject5', 'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)}, lab_key={\"lab\": \"LabA\"} ) Element to NWB Mappings session.Session::KEY -> NWBFile.session_id session.Session::session_datetime -> NWBFile.session_start_time session.SessionNote::session_note -> NWBFile.session_description session.SessionExperimenter::user -> NWBFile.experimenter subject.Subject::subject -> NWBFile.subject.subject_id subject.Subject::sex -> NWBFile.subject.sex lab.Lab::institution -> NWBFile.institution lab.Lab::lab_name -> NWBFile.lab lab.Protocol::protocol -> NWBFile.protocol lab.Protocol::protocol_description -> NWBFile.notes lab.Project::project_description -> NWBFile.experiment_description lab.ProjectKeywords.keyword -> NWBFile.keywords lab.ProjectPublication.publication -> NWBFile.related_publications Parameters: Name Type Description Default session_key dict Key for session.Session. Assumes session_datetime is in UTC time zone. required lab_key dict Key for lab.Lab. Defaults to None. None project_key dict Key for lab.Project. Defaults to None. None protocol_key dict Key for Lab.Protocol. Defaults to None. None additional_nwbfile_kwargs dict Optionally overwrite or add fields to NWBFile. Defaults to None. None Returns: Type Description pynwb . NWBFile pynwb.NWBFile: NWB file object Source code in element_session/export/nwb.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def session_to_nwb ( session_key : dict , lab_key : dict = None , project_key : dict = None , protocol_key : dict = None , additional_nwbfile_kwargs = None , ) -> pynwb . NWBFile : \"\"\"Return subject and session metadata ass NWBFile object Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session. Example: session_to_nwb( session_key={'subject': 'subject5', 'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)}, lab_key={\"lab\": \"LabA\"} ) Element to NWB Mappings: session.Session::KEY -> NWBFile.session_id \\n session.Session::session_datetime -> NWBFile.session_start_time \\n session.SessionNote::session_note -> NWBFile.session_description \\n session.SessionExperimenter::user -> NWBFile.experimenter \\n subject.Subject::subject -> NWBFile.subject.subject_id \\n subject.Subject::sex -> NWBFile.subject.sex \\n lab.Lab::institution -> NWBFile.institution \\n lab.Lab::lab_name -> NWBFile.lab \\n lab.Protocol::protocol -> NWBFile.protocol \\n lab.Protocol::protocol_description -> NWBFile.notes \\n lab.Project::project_description -> NWBFile.experiment_description \\n lab.ProjectKeywords.keyword -> NWBFile.keywords \\n lab.ProjectPublication.publication -> NWBFile.related_publications \\n Args: session_key (dict): Key for session.Session. Assumes session_datetime is in UTC time zone. lab_key (dict, optional): Key for lab.Lab. Defaults to None. project_key (dict, optional): Key for lab.Project. Defaults to None. protocol_key (dict, optional): Key for Lab.Protocol. Defaults to None. additional_nwbfile_kwargs (dict, optional): Optionally overwrite or add fields to NWBFile. Defaults to None. Returns: pynwb.NWBFile: NWB file object \"\"\" # ensure only one session key is entered session_key = ( session . Session & session_key ) . fetch1 ( \"KEY\" ) session_identifier = { k : v . isoformat () if isinstance ( v , datetime . datetime ) else v for k , v in session_key . items () } nwbfile_kwargs = dict ( session_id = \"_\" . join ( session_identifier . values ()), identifier = str ( uuid4 ()), ) session_info = ( ( session . Session & session_key ) . join ( session . SessionNote , left = True ) . fetch1 () ) nwbfile_kwargs . update ( session_start_time = session_info [ \"session_datetime\" ] . astimezone ( datetime . timezone . utc ) ) nwbfile_kwargs . update ( session_description = session_info . get ( \"session_note\" , \"\" )) experimenters = ( session . SessionExperimenter & session_key ) . fetch ( \"user\" ) nwbfile_kwargs . update ( experimenter = list ( experimenters ) or None ) subject_to_nwb = getattr ( session . _linking_module , \"subject_to_nwb\" , False ) if subject_to_nwb : nwbfile_kwargs . update ( subject = subject_to_nwb ( session_key )) else : subject_id = \"_\" . join ( ( getattr ( session . _linking_module , \"Subject\" ) & session_key ) . fetch1 ( \"KEY\" ) . values () ) nwbfile_kwargs . update ( subject = pynwb . file . Subject ( subject_id = subject_id )) if any ([ lab_key , project_key , protocol_key ]): element_lab_to_nwb_dict = getattr ( session . _linking_module , \"element_lab_to_nwb_dict\" , False ) if element_lab_to_nwb_dict : nwbfile_kwargs . update ( element_lab_to_nwb_dict ( lab_key = lab_key , project_key = project_key , protocol_key = protocol_key ) ) if additional_nwbfile_kwargs is not None : nwbfile_kwargs . update ( additional_nwbfile_kwargs ) return pynwb . NWBFile ( ** nwbfile_kwargs )", "title": "nwb.py"}, {"location": "api/element_session/export/nwb/#element_session.export.nwb.session_to_nwb", "text": "Return subject and session metadata ass NWBFile object Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session. Example session_to_nwb( session_key={'subject': 'subject5', 'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)}, lab_key={\"lab\": \"LabA\"} ) Element to NWB Mappings session.Session::KEY -> NWBFile.session_id session.Session::session_datetime -> NWBFile.session_start_time session.SessionNote::session_note -> NWBFile.session_description session.SessionExperimenter::user -> NWBFile.experimenter subject.Subject::subject -> NWBFile.subject.subject_id subject.Subject::sex -> NWBFile.subject.sex lab.Lab::institution -> NWBFile.institution lab.Lab::lab_name -> NWBFile.lab lab.Protocol::protocol -> NWBFile.protocol lab.Protocol::protocol_description -> NWBFile.notes lab.Project::project_description -> NWBFile.experiment_description lab.ProjectKeywords.keyword -> NWBFile.keywords lab.ProjectPublication.publication -> NWBFile.related_publications Parameters: Name Type Description Default session_key dict Key for session.Session. Assumes session_datetime is in UTC time zone. required lab_key dict Key for lab.Lab. Defaults to None. None project_key dict Key for lab.Project. Defaults to None. None protocol_key dict Key for Lab.Protocol. Defaults to None. None additional_nwbfile_kwargs dict Optionally overwrite or add fields to NWBFile. Defaults to None. None Returns: Type Description pynwb . NWBFile pynwb.NWBFile: NWB file object Source code in element_session/export/nwb.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def session_to_nwb ( session_key : dict , lab_key : dict = None , project_key : dict = None , protocol_key : dict = None , additional_nwbfile_kwargs = None , ) -> pynwb . NWBFile : \"\"\"Return subject and session metadata ass NWBFile object Gather session- and subject-level metadata and use it to create an NWBFile. If there is no subject_to_nwb export function in the current namespace, subject_id will be inferred from the set of primary attributes in the Subject table upstream of Session. Example: session_to_nwb( session_key={'subject': 'subject5', 'session_datetime': datetime.datetime(2020, 5, 12, 4, 13, 7)}, lab_key={\"lab\": \"LabA\"} ) Element to NWB Mappings: session.Session::KEY -> NWBFile.session_id \\n session.Session::session_datetime -> NWBFile.session_start_time \\n session.SessionNote::session_note -> NWBFile.session_description \\n session.SessionExperimenter::user -> NWBFile.experimenter \\n subject.Subject::subject -> NWBFile.subject.subject_id \\n subject.Subject::sex -> NWBFile.subject.sex \\n lab.Lab::institution -> NWBFile.institution \\n lab.Lab::lab_name -> NWBFile.lab \\n lab.Protocol::protocol -> NWBFile.protocol \\n lab.Protocol::protocol_description -> NWBFile.notes \\n lab.Project::project_description -> NWBFile.experiment_description \\n lab.ProjectKeywords.keyword -> NWBFile.keywords \\n lab.ProjectPublication.publication -> NWBFile.related_publications \\n Args: session_key (dict): Key for session.Session. Assumes session_datetime is in UTC time zone. lab_key (dict, optional): Key for lab.Lab. Defaults to None. project_key (dict, optional): Key for lab.Project. Defaults to None. protocol_key (dict, optional): Key for Lab.Protocol. Defaults to None. additional_nwbfile_kwargs (dict, optional): Optionally overwrite or add fields to NWBFile. Defaults to None. Returns: pynwb.NWBFile: NWB file object \"\"\" # ensure only one session key is entered session_key = ( session . Session & session_key ) . fetch1 ( \"KEY\" ) session_identifier = { k : v . isoformat () if isinstance ( v , datetime . datetime ) else v for k , v in session_key . items () } nwbfile_kwargs = dict ( session_id = \"_\" . join ( session_identifier . values ()), identifier = str ( uuid4 ()), ) session_info = ( ( session . Session & session_key ) . join ( session . SessionNote , left = True ) . fetch1 () ) nwbfile_kwargs . update ( session_start_time = session_info [ \"session_datetime\" ] . astimezone ( datetime . timezone . utc ) ) nwbfile_kwargs . update ( session_description = session_info . get ( \"session_note\" , \"\" )) experimenters = ( session . SessionExperimenter & session_key ) . fetch ( \"user\" ) nwbfile_kwargs . update ( experimenter = list ( experimenters ) or None ) subject_to_nwb = getattr ( session . _linking_module , \"subject_to_nwb\" , False ) if subject_to_nwb : nwbfile_kwargs . update ( subject = subject_to_nwb ( session_key )) else : subject_id = \"_\" . join ( ( getattr ( session . _linking_module , \"Subject\" ) & session_key ) . fetch1 ( \"KEY\" ) . values () ) nwbfile_kwargs . update ( subject = pynwb . file . Subject ( subject_id = subject_id )) if any ([ lab_key , project_key , protocol_key ]): element_lab_to_nwb_dict = getattr ( session . _linking_module , \"element_lab_to_nwb_dict\" , False ) if element_lab_to_nwb_dict : nwbfile_kwargs . update ( element_lab_to_nwb_dict ( lab_key = lab_key , project_key = project_key , protocol_key = protocol_key ) ) if additional_nwbfile_kwargs is not None : nwbfile_kwargs . update ( additional_nwbfile_kwargs ) return pynwb . NWBFile ( ** nwbfile_kwargs )", "title": "session_to_nwb()"}, {"location": "api/workflow_session/export/", "text": "", "title": "export.py"}, {"location": "api/workflow_session/ingest/", "text": "ingest_lab ( lab_csv_path = './user_data/lab/labs.csv' , project_csv_path = './user_data/lab/projects.csv' , publication_csv_path = './user_data/lab/publications.csv' , keyword_csv_path = './user_data/lab/keywords.csv' , protocol_csv_path = './user_data/lab/protocols.csv' , users_csv_path = './user_data/lab/users.csv' , project_user_csv_path = './user_data/lab/project_users.csv' , sources_csv_path = './user_data/lab/sources.csv' , skip_duplicates = True , verbose = True ) \u00b6 Insert data from a CSVs into their corresponding lab schema tables. By default, uses data from workflow_session/user_data/lab/ Parameters: Name Type Description Default lab_csv_path str relative path of lab csv './user_data/lab/labs.csv' project_csv_path str relative path of project csv './user_data/lab/projects.csv' publication_csv_path str relative path of publication csv './user_data/lab/publications.csv' keyword_csv_path str relative path of keyword csv './user_data/lab/keywords.csv' protocol_csv_path str relative path of protocol csv './user_data/lab/protocols.csv' users_csv_path str relative path of users csv './user_data/lab/users.csv' project_user_csv_path str relative path of project users csv './user_data/lab/project_users.csv' sources_csv_path str relative path of sources csv './user_data/lab/sources.csv' skip_duplicates bool Default True. See DataJoint insert function True verbose bool Print number inserted (i.e., table length change) True Source code in workflow_session/ingest.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def ingest_lab ( lab_csv_path : str = \"./user_data/lab/labs.csv\" , project_csv_path : str = \"./user_data/lab/projects.csv\" , publication_csv_path : str = \"./user_data/lab/publications.csv\" , keyword_csv_path : str = \"./user_data/lab/keywords.csv\" , protocol_csv_path : str = \"./user_data/lab/protocols.csv\" , users_csv_path : str = \"./user_data/lab/users.csv\" , project_user_csv_path : str = \"./user_data/lab/project_users.csv\" , sources_csv_path : str = \"./user_data/lab/sources.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\"Insert data from a CSVs into their corresponding lab schema tables. By default, uses data from workflow_session/user_data/lab/ Args: lab_csv_path (str): relative path of lab csv project_csv_path (str): relative path of project csv publication_csv_path (str): relative path of publication csv keyword_csv_path (str): relative path of keyword csv protocol_csv_path (str): relative path of protocol csv users_csv_path (str): relative path of users csv project_user_csv_path (str): relative path of project users csv sources_csv_path (str): relative path of sources csv skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" # List with repeats for when mult dj.tables fed by same CSV csvs = [ lab_csv_path , # 0 lab_csv_path , # 1 project_csv_path , # 2 project_csv_path , # 3 publication_csv_path , # 4 keyword_csv_path , # 5 protocol_csv_path , # 6 protocol_csv_path , # 7 users_csv_path , # 8 users_csv_path , # 9 users_csv_path , # 10 project_user_csv_path , # 11 sources_csv_path , # 12 ] tables = [ lab . Lab (), # 0 lab . Location (), # 1 lab . Project (), # 2 lab . ProjectSourceCode (), # 3 lab . ProjectPublication (), # 4 lab . ProjectKeywords (), # 5 lab . ProtocolType (), # 6 lab . Protocol (), # 7 lab . UserRole (), # 8 lab . User (), # 9 lab . LabMembership (), # 10 lab . ProjectUser (), # 11 lab . Source (), # 13 ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose ) ingest_subjects ( subject_csv_path = './user_data/subject/subjects.csv' , subject_part_csv_path = './user_data/subject/subjects_part.csv' , allele_csv_path = './user_data/subject/allele.csv' , cage_csv_path = './user_data/subject/cage.csv' , breedingpair_csv_path = './user_data/subject/breedingpair.csv' , genotype_test_csv_path = './user_data/subject/genotype_test.csv' , line_csv_path = './user_data/subject/line.csv' , strain_csv_path = './user_data/subject/strain.csv' , zygosity_csv_path = './user_data/subject/zygosity.csv' , skip_duplicates = True , verbose = True ) \u00b6 Insert data from a subject csv into corresponding subject schema tables By default, uses data from workflow_session/user_data/subject/ Parameters: Name Type Description Default subject_csv_path str relative path of csv for subject data './user_data/subject/subjects.csv' subject_part_csv_path str relative path of csv for subject part tables './user_data/subject/subjects_part.csv' allele_csv_path str relative path of csv for alleles './user_data/subject/allele.csv' cage_csv_path str relative path of csv for cages './user_data/subject/cage.csv' breedingpair_csv_path str relative path of csv for breeding pairs './user_data/subject/breedingpair.csv' genotype_test_csv_path str relative path of csv for genotype './user_data/subject/genotype_test.csv' line_csv_path str relative path of csv for line './user_data/subject/line.csv' strain_csv_path str relative path of csv for strain './user_data/subject/strain.csv' zygosity_csv_path str relative path of csv for zygotsky './user_data/subject/zygosity.csv' skip_duplicates bool Default True. See DataJoint insert function True verbose bool Print number inserted (i.e., table length change) True Source code in workflow_session/ingest.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def ingest_subjects ( subject_csv_path : str = \"./user_data/subject/subjects.csv\" , subject_part_csv_path : str = \"./user_data/subject/subjects_part.csv\" , allele_csv_path : str = \"./user_data/subject/allele.csv\" , cage_csv_path : str = \"./user_data/subject/cage.csv\" , breedingpair_csv_path : str = \"./user_data/subject/breedingpair.csv\" , genotype_test_csv_path : str = \"./user_data/subject/genotype_test.csv\" , line_csv_path : str = \"./user_data/subject/line.csv\" , strain_csv_path : str = \"./user_data/subject/strain.csv\" , zygosity_csv_path : str = \"./user_data/subject/zygosity.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\"Insert data from a subject csv into corresponding subject schema tables By default, uses data from workflow_session/user_data/subject/ Args: subject_csv_path (str): relative path of csv for subject data subject_part_csv_path (str): relative path of csv for subject part tables allele_csv_path (str): relative path of csv for alleles cage_csv_path (str): relative path of csv for cages breedingpair_csv_path (str): relative path of csv for breeding pairs genotype_test_csv_path (str): relative path of csv for genotype line_csv_path (str): relative path of csv for line strain_csv_path (str): relative path of csv for strain zygosity_csv_path (str): relative path of csv for zygotsky skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" csvs = [ subject_csv_path , # 0 subject_csv_path , # 1 subject_csv_path , # 2 subject_part_csv_path , # 3 subject_part_csv_path , # 4 subject_part_csv_path , # 5 strain_csv_path , # 6 allele_csv_path , # 7 allele_csv_path , # 8 allele_csv_path , # 9 allele_csv_path , # 10 line_csv_path , # 11 line_csv_path , # 12 subject_part_csv_path , # 13 subject_part_csv_path , # 14 subject_part_csv_path , # 15 zygosity_csv_path , # 16 breedingpair_csv_path , # 17 breedingpair_csv_path , # 18 breedingpair_csv_path , # 19 breedingpair_csv_path , # 20 breedingpair_csv_path , # 21 breedingpair_csv_path , # 22 cage_csv_path , # 23 cage_csv_path , # 24 genotype_test_csv_path , # 25 ] tables = [ subject . Subject (), # 0 subject . SubjectDeath (), # 1 subject . SubjectCullMethod (), # 2 subject . Subject . Protocol (), # 3 subject . Subject . User (), # 4 subject . Subject . Lab (), # 5 subject . Strain (), # 6 subject . Allele (), # 7 subject . Allele . Source (), # 8 genotyping . Sequence (), # 9 genotyping . AlleleSequence (), # 10 subject . Line (), # 11 subject . Line . Allele (), # 12 subject . Subject . Line (), # 13 subject . Subject . Strain (), # 14 subject . Subject . Source (), # 15 subject . Zygosity (), # 16 genotyping . BreedingPair (), # 17 genotyping . BreedingPair . Father (), # 18 genotyping . BreedingPair . Mother (), # 19 genotyping . Litter (), # 20 genotyping . Weaning (), # 21 genotyping . SubjectLitter (), # 22 genotyping . Cage (), # 23 genotyping . SubjectCaging (), # 24 genotyping . GenotypeTest (), # 25 ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose ) ingest_sessions ( session_csv_path = './user_data/session/sessions.csv' , skip_duplicates = True , verbose = True ) \u00b6 Inserts data from a sessions csv into corresponding session schema tables By default, uses data from workflow_session/user_data/session/ session_csv_path (str): relative path of session csv skip_duplicates (bool): Default True. See DataJoint insert function verbose (bool): Print number inserted (i.e., table length change) Source code in workflow_session/ingest.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def ingest_sessions ( session_csv_path : str = \"./user_data/session/sessions.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\" Inserts data from a sessions csv into corresponding session schema tables By default, uses data from workflow_session/user_data/session/ session_csv_path (str): relative path of session csv skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" csvs = [ session_csv_path , session_csv_path , session_csv_path , session_csv_path , session_csv_path , ] tables = [ session . Session (), session . SessionDirectory (), session . SessionNote (), session . ProjectSession (), session . SessionExperimenter (), ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose )", "title": "ingest.py"}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_lab", "text": "Insert data from a CSVs into their corresponding lab schema tables. By default, uses data from workflow_session/user_data/lab/ Parameters: Name Type Description Default lab_csv_path str relative path of lab csv './user_data/lab/labs.csv' project_csv_path str relative path of project csv './user_data/lab/projects.csv' publication_csv_path str relative path of publication csv './user_data/lab/publications.csv' keyword_csv_path str relative path of keyword csv './user_data/lab/keywords.csv' protocol_csv_path str relative path of protocol csv './user_data/lab/protocols.csv' users_csv_path str relative path of users csv './user_data/lab/users.csv' project_user_csv_path str relative path of project users csv './user_data/lab/project_users.csv' sources_csv_path str relative path of sources csv './user_data/lab/sources.csv' skip_duplicates bool Default True. See DataJoint insert function True verbose bool Print number inserted (i.e., table length change) True Source code in workflow_session/ingest.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def ingest_lab ( lab_csv_path : str = \"./user_data/lab/labs.csv\" , project_csv_path : str = \"./user_data/lab/projects.csv\" , publication_csv_path : str = \"./user_data/lab/publications.csv\" , keyword_csv_path : str = \"./user_data/lab/keywords.csv\" , protocol_csv_path : str = \"./user_data/lab/protocols.csv\" , users_csv_path : str = \"./user_data/lab/users.csv\" , project_user_csv_path : str = \"./user_data/lab/project_users.csv\" , sources_csv_path : str = \"./user_data/lab/sources.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\"Insert data from a CSVs into their corresponding lab schema tables. By default, uses data from workflow_session/user_data/lab/ Args: lab_csv_path (str): relative path of lab csv project_csv_path (str): relative path of project csv publication_csv_path (str): relative path of publication csv keyword_csv_path (str): relative path of keyword csv protocol_csv_path (str): relative path of protocol csv users_csv_path (str): relative path of users csv project_user_csv_path (str): relative path of project users csv sources_csv_path (str): relative path of sources csv skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" # List with repeats for when mult dj.tables fed by same CSV csvs = [ lab_csv_path , # 0 lab_csv_path , # 1 project_csv_path , # 2 project_csv_path , # 3 publication_csv_path , # 4 keyword_csv_path , # 5 protocol_csv_path , # 6 protocol_csv_path , # 7 users_csv_path , # 8 users_csv_path , # 9 users_csv_path , # 10 project_user_csv_path , # 11 sources_csv_path , # 12 ] tables = [ lab . Lab (), # 0 lab . Location (), # 1 lab . Project (), # 2 lab . ProjectSourceCode (), # 3 lab . ProjectPublication (), # 4 lab . ProjectKeywords (), # 5 lab . ProtocolType (), # 6 lab . Protocol (), # 7 lab . UserRole (), # 8 lab . User (), # 9 lab . LabMembership (), # 10 lab . ProjectUser (), # 11 lab . Source (), # 13 ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose )", "title": "ingest_lab()"}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_subjects", "text": "Insert data from a subject csv into corresponding subject schema tables By default, uses data from workflow_session/user_data/subject/ Parameters: Name Type Description Default subject_csv_path str relative path of csv for subject data './user_data/subject/subjects.csv' subject_part_csv_path str relative path of csv for subject part tables './user_data/subject/subjects_part.csv' allele_csv_path str relative path of csv for alleles './user_data/subject/allele.csv' cage_csv_path str relative path of csv for cages './user_data/subject/cage.csv' breedingpair_csv_path str relative path of csv for breeding pairs './user_data/subject/breedingpair.csv' genotype_test_csv_path str relative path of csv for genotype './user_data/subject/genotype_test.csv' line_csv_path str relative path of csv for line './user_data/subject/line.csv' strain_csv_path str relative path of csv for strain './user_data/subject/strain.csv' zygosity_csv_path str relative path of csv for zygotsky './user_data/subject/zygosity.csv' skip_duplicates bool Default True. See DataJoint insert function True verbose bool Print number inserted (i.e., table length change) True Source code in workflow_session/ingest.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def ingest_subjects ( subject_csv_path : str = \"./user_data/subject/subjects.csv\" , subject_part_csv_path : str = \"./user_data/subject/subjects_part.csv\" , allele_csv_path : str = \"./user_data/subject/allele.csv\" , cage_csv_path : str = \"./user_data/subject/cage.csv\" , breedingpair_csv_path : str = \"./user_data/subject/breedingpair.csv\" , genotype_test_csv_path : str = \"./user_data/subject/genotype_test.csv\" , line_csv_path : str = \"./user_data/subject/line.csv\" , strain_csv_path : str = \"./user_data/subject/strain.csv\" , zygosity_csv_path : str = \"./user_data/subject/zygosity.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\"Insert data from a subject csv into corresponding subject schema tables By default, uses data from workflow_session/user_data/subject/ Args: subject_csv_path (str): relative path of csv for subject data subject_part_csv_path (str): relative path of csv for subject part tables allele_csv_path (str): relative path of csv for alleles cage_csv_path (str): relative path of csv for cages breedingpair_csv_path (str): relative path of csv for breeding pairs genotype_test_csv_path (str): relative path of csv for genotype line_csv_path (str): relative path of csv for line strain_csv_path (str): relative path of csv for strain zygosity_csv_path (str): relative path of csv for zygotsky skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" csvs = [ subject_csv_path , # 0 subject_csv_path , # 1 subject_csv_path , # 2 subject_part_csv_path , # 3 subject_part_csv_path , # 4 subject_part_csv_path , # 5 strain_csv_path , # 6 allele_csv_path , # 7 allele_csv_path , # 8 allele_csv_path , # 9 allele_csv_path , # 10 line_csv_path , # 11 line_csv_path , # 12 subject_part_csv_path , # 13 subject_part_csv_path , # 14 subject_part_csv_path , # 15 zygosity_csv_path , # 16 breedingpair_csv_path , # 17 breedingpair_csv_path , # 18 breedingpair_csv_path , # 19 breedingpair_csv_path , # 20 breedingpair_csv_path , # 21 breedingpair_csv_path , # 22 cage_csv_path , # 23 cage_csv_path , # 24 genotype_test_csv_path , # 25 ] tables = [ subject . Subject (), # 0 subject . SubjectDeath (), # 1 subject . SubjectCullMethod (), # 2 subject . Subject . Protocol (), # 3 subject . Subject . User (), # 4 subject . Subject . Lab (), # 5 subject . Strain (), # 6 subject . Allele (), # 7 subject . Allele . Source (), # 8 genotyping . Sequence (), # 9 genotyping . AlleleSequence (), # 10 subject . Line (), # 11 subject . Line . Allele (), # 12 subject . Subject . Line (), # 13 subject . Subject . Strain (), # 14 subject . Subject . Source (), # 15 subject . Zygosity (), # 16 genotyping . BreedingPair (), # 17 genotyping . BreedingPair . Father (), # 18 genotyping . BreedingPair . Mother (), # 19 genotyping . Litter (), # 20 genotyping . Weaning (), # 21 genotyping . SubjectLitter (), # 22 genotyping . Cage (), # 23 genotyping . SubjectCaging (), # 24 genotyping . GenotypeTest (), # 25 ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose )", "title": "ingest_subjects()"}, {"location": "api/workflow_session/ingest/#workflow_session.ingest.ingest_sessions", "text": "Inserts data from a sessions csv into corresponding session schema tables By default, uses data from workflow_session/user_data/session/ session_csv_path (str): relative path of session csv skip_duplicates (bool): Default True. See DataJoint insert function verbose (bool): Print number inserted (i.e., table length change) Source code in workflow_session/ingest.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def ingest_sessions ( session_csv_path : str = \"./user_data/session/sessions.csv\" , skip_duplicates : bool = True , verbose : bool = True , ): \"\"\" Inserts data from a sessions csv into corresponding session schema tables By default, uses data from workflow_session/user_data/session/ session_csv_path (str): relative path of session csv skip_duplicates (bool): Default True. See DataJoint `insert` function verbose (bool): Print number inserted (i.e., table length change) \"\"\" csvs = [ session_csv_path , session_csv_path , session_csv_path , session_csv_path , session_csv_path , ] tables = [ session . Session (), session . SessionDirectory (), session . SessionNote (), session . ProjectSession (), session . SessionExperimenter (), ] ingest_csv_to_table ( csvs , tables , skip_duplicates = skip_duplicates , verbose = verbose )", "title": "ingest_sessions()"}, {"location": "api/workflow_session/paths/", "text": "get_session_directory ( session_key ) \u00b6 Return relative path from SessionDirectory table given key Parameters: Name Type Description Default session_key dict Key uniquely identifying a session required Returns: Name Type Description path str Relative path of session directory Source code in workflow_session/paths.py 1 2 3 4 5 6 7 8 9 10 11 12 13 def get_session_directory ( session_key : dict ) -> str : \"\"\"Return relative path from SessionDirectory table given key Args: session_key (dict): Key uniquely identifying a session Returns: path (str): Relative path of session directory \"\"\" from .pipeline import session session_dir = ( session . SessionDirectory & session_key ) . fetch1 ( \"session_dir\" ) return session_dir", "title": "paths.py"}, {"location": "api/workflow_session/paths/#workflow_session.paths.get_session_directory", "text": "Return relative path from SessionDirectory table given key Parameters: Name Type Description Default session_key dict Key uniquely identifying a session required Returns: Name Type Description path str Relative path of session directory Source code in workflow_session/paths.py 1 2 3 4 5 6 7 8 9 10 11 12 13 def get_session_directory ( session_key : dict ) -> str : \"\"\"Return relative path from SessionDirectory table given key Args: session_key (dict): Key uniquely identifying a session Returns: path (str): Relative path of session directory \"\"\" from .pipeline import session session_dir = ( session . SessionDirectory & session_key ) . fetch1 ( \"session_dir\" ) return session_dir", "title": "get_session_directory()"}, {"location": "api/workflow_session/pipeline/", "text": "Session \u00b6 Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_datetime datetime date and time of the session Source code in element_session/session_with_datetime.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" Attribute \u00b6 Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_datetime.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\" SessionDirectory \u00b6 Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_datetime.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\" SessionExperimenter \u00b6 Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_datetime.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\" SessionNote \u00b6 Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) Additional notes Source code in element_session/session_with_datetime.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\" ProjectSession \u00b6 Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_datetime.py 132 133 134 135 136 137 138 139 140 141 142 143 144 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "pipeline.py"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.Session", "text": "Bases: dj . Manual Central Session table Attributes: Name Type Description Subject foreign key Key for Subject table session_datetime datetime date and time of the session Source code in element_session/session_with_datetime.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 @schema class Session ( dj . Manual ): \"\"\"Central Session table Attributes: Subject (foreign key): Key for Subject table session_datetime (datetime): date and time of the session \"\"\" definition = \"\"\" -> Subject session_datetime: datetime \"\"\" class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Session"}, {"location": "api/workflow_session/pipeline/#element_session.session_with_datetime.Session.Attribute", "text": "Bases: dj . Part Additional feature of interest for a session. Attributes: Name Type Description Session foreign key Key for Session table attribute_name varchar(32) Name shared across instances of attribute attribute_value varchar(2000), optional Attribute value attribute_blob longblob Optional data store field Source code in element_session/session_with_datetime.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Attribute ( dj . Part ): \"\"\"Additional feature of interest for a session. Attributes: Session (foreign key): Key for Session table attribute_name ( varchar(32) ): Name shared across instances of attribute attribute_value ( varchar(2000), optional ): Attribute value attribute_blob (longblob, optional): Optional data store field \"\"\" definition = \"\"\" -> master attribute_name: varchar(32) --- attribute_value='': varchar(2000) attribute_blob=null: longblob \"\"\"", "title": "Attribute"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionDirectory", "text": "Bases: dj . Manual Relative path information for files related to a given session. Attributes: Name Type Description Session foreign key Key for Session table session_dir varchar(256) Path to the data directory for a session Source code in element_session/session_with_datetime.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @schema class SessionDirectory ( dj . Manual ): \"\"\"Relative path information for files related to a given session. Attributes: Session (foreign key): Key for Session table session_dir ( varchar(256) ): Path to the data directory for a session \"\"\" definition = \"\"\" -> Session --- session_dir: varchar(256) # Path to the data directory for a session \"\"\"", "title": "SessionDirectory"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionExperimenter", "text": "Bases: dj . Manual Individual(s) conducting the session Attributes: Name Type Description Session foreign key Key for Session table Experimenter foreign key Key for Experimenter table Source code in element_session/session_with_datetime.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @schema class SessionExperimenter ( dj . Manual ): \"\"\"Individual(s) conducting the session Attributes: Session (foreign key): Key for Session table Experimenter (foreign key): Key for Experimenter table \"\"\" definition = \"\"\" # Individual(s) conducting the session -> Session -> Experimenter \"\"\"", "title": "SessionExperimenter"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.SessionNote", "text": "Bases: dj . Manual Additional notes related to a given session Attributes: Name Type Description Session foreign key Key for Session table session_note varchar(1024) Additional notes Source code in element_session/session_with_datetime.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 @schema class SessionNote ( dj . Manual ): \"\"\"Additional notes related to a given session Attributes: Session (foreign key): Key for Session table session_note ( varchar(1024) ): Additional notes \"\"\" definition = \"\"\" -> Session --- session_note: varchar(1024) \"\"\"", "title": "SessionNote"}, {"location": "api/workflow_session/pipeline/#workflow_session.pipeline.ProjectSession", "text": "Bases: dj . Manual Table linking upstream Projects with Session Attributes: Name Type Description Project foreign key Key for Project table Session foreign key Key for Session table Source code in element_session/session_with_datetime.py 132 133 134 135 136 137 138 139 140 141 142 143 144 @schema class ProjectSession ( dj . Manual ): \"\"\"Table linking upstream Projects with Session Attributes: Project (foreign key): Key for Project table Session (foreign key): Key for Session table \"\"\" definition = \"\"\" -> Project -> Session \"\"\"", "title": "ProjectSession"}, {"location": "api/workflow_session/version/", "text": "Package metadata.", "title": "version.py"}]}